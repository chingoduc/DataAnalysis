getwd()
load("D:/Workspace/DataAnalysis/.RData")
download.file("https://spark-public.s3.amazonaws.com/dataanalysis/cd4.data", destfile="./Data/cd4.data")
getwd()
setwd("D:/Workspace/DataAnalysis")
download.file("https://spark-public.s3.amazonaws.com/dataanalysis/cd4.data", destfile="./Data/cd4.data")
c4dData <- read.table("./data/c4d.data", col.names=c("time", "cd4", "age", "packs", "drugs", "sex", "cesd", "id"))
c4dData <- read.table("./data/cd4.data", col.names=c("time", "cd4", "age", "packs", "drugs", "sex", "cesd", "id"))
View(`c4dData`)
cd4Data <- c4dData
rm(c4dData)
cd4Data <- cd4Data[order(cd4Data$time),]
head(cd4Data)
plot(cd4Data$time, cd4Data$cd4, pch=19, cex=0.1)
point(mean(cd4Data$time[1:2]), mean(cd4Data$cd4[1:2]), col="blue", pch=19)
points(mean(cd4Data$time[1:2]), mean(cd4Data$cd4[1:2]), col="blue", pch=19)
points(mean(cd4Data$time[2:3]), mean(cd4Data$cd4[2:3]), col="blue", pch=19)
aveTime <- aveCd4 <- rep(NA, length(3:(dim(cd4Data)[1]-2)))
for(i in 3:(dim(cd4Data)[1]-2)) {}
for(i in 3:(dim(cd4Data)[1]-2)) {
aveTime[i] <- mean(cd4Data$time[(i-2):(i+2)])
aveCd4[i] <- mean(cd4Data$cd4[(i-2):(i+2)])
}
lines(aveTime, aveCd4, col="blue", lwd=3)
plot(cd4Data$time, cd4Data$cd4, pch=19, cex=0.1)
aveTime <- aveCd4 <- rep(NA, length(11:(dim(cd4Data)[1]-10)))
for(i in 11:(dim(cd4Data)[1]-2)) {
aveTime[i] <- mean(cd4Data$time[(i-10):(i+10)])
aveCd4[i] <- mean(cd4Data$cd4[(i-10):(i+10)])
}
lines(aveTime, aveCd4, col="blue", lwd=3)
plot(cd4Data$time,cd4Data$cd4,pch=19,cex=0.1)
aveTime <- aveCd4 <- rep(NA,length(201:(dim(cd4Data)[1]-200)))
for(i in 201:(dim(cd4Data)[1]-2)){
aveTime[i] <- mean(cd4Data$time[(i-200):(i+200)])
aveCd4[i] <- mean(cd4Data$cd4[(i-200):(i+200)])
}
lines(aveTime,aveCd4,col="blue",lwd=3)
filtTime <- as.vector(filter(cd4Data$time,filter=rep(1,200))/200)
filtCd4 <- as.vector(filter(cd4Data$cd4,filter=rep(1,200))/200)
plot(cd4Data$time,cd4Data$cd4,pch=19,cex=0.1); lines(filtTime,filtCd4,col="blue",lwd=3)
hotdogs <- read.csv("http://datasets.flowingdata.com/hot-dog-contest-winners.csv", sep=",", header=TRUE)
fill_colors <- c()
for(i in 1:length(hotdogs$Country)) {
if (hotdogs$Country[i] == "United States") {
fill_colors <- c(fill_colors, "#821122")
} else {
fill_colors <- c(fill_colors, "#cccccc")
}
}
barplot(hotdogs$Dogs.eaten, names.arg=hotdogs$Year, col=fill_colors, border=NA, xlab="Year", ylab="Hot dogs and buns (HDB) eaten")
save.image("D:/Workspace/DataAnalysis/Data-Visualization-Study.RData")
?avg
?average
sum
?sum
sum(hotdogs$Dogs.eaten)
summary(hotdogs$Dogs.eaten)
last5eaten <- c(hotdogs$Dogs.eaten[27:31])
last5eaten
mean(last5eaten)
summary(last5eaten)
plot(hotdogs$Dogs.eaten)
plot(hotdogs$Year, hotdogs$Dogs.eaten)
plot(hotdogs$Year, hotdogs$Dogs.eaten, p="3")
plot(hotdogs$Year, hotdogs$Dogs.eaten, p=3)
?plot
plot(hotdogs$Year, hotdogs$Dogs.eaten, type="h", col=fill_colors, lwd=10)
plot(hotdogs$Year, hotdogs$Dogs.eaten, type="s", col=fill_colors, lwd=10)
plot(hotdogs$Year, hotdogs$Dogs.eaten, type="o", col=fill_colors, lwd=10)
plot(hotdogs$Year, hotdogs$Dogs.eaten, type="S", col=fill_colors, lwd=10)
plot(hotdogs$Year, hotdogs$Dogs.eaten, type="b", col=fill_colors, lwd=10)
plot(hotdogs$Year, hotdogs$Dogs.eaten, type="c", col=fill_colors, lwd=10)
plot(hotdogs$Year, hotdogs$Dogs.eaten, type="n", col=fill_colors, lwd=10)
plot(hotdogs$Year, hotdogs$Dogs.eaten, type="p", col=fill_colors, lwd=10)
install.packages(c("cluster", "foreign", "KernSmooth", "lattice", "Matrix", "nnet", "rpart", "survival"))
myFamilyNames <-c("Dad","Mom","Sis","Bro","Dog")
myFamilyAges <- c(43,42,12,8,5)
myFamilyGenders <- c("Male", "Female", "Female", "Male", "Female")
type(myFamilyGenders)
summary(myFamilyGenders)
sum(myFamilyGenders)
myFamilyWeights <- c(188,136,83,61,44)
myFamily <- data.frame(myFamilyNames, myFamilyAges, myFamilyGenders, myFamilyWeights)
myFamily
str(myFamily)
str(myFamilyGender)
str(myFamilyGenders)
myFamily[1]
myFamily[:1]
myFamily[0:1]
myFamily[1:0]
myFamily[:2]
myFamily[,2]
myFamily[1,]
myFamily[1,2:3]
myFamily[2:3,]
summary(myFamily)
myFamily[1,1] <- Daddy
myFamily[1,1] <- "Daddy"
myFamily[1,1]
View(myFamily)
View(myFamily)
myFamily[1,1] <- "Dad"
View(myFamily)
View(myFamily)
install.packages("hexbin")
hot_dog_places <- read.csv("http://datasets.flowingdata.com/hot-dog-places.csv", sep=",", header=TRUE)
names(hot_dog_places) <- c("2000","2001","2002","2003","2004","2005","2006","2007","2008","2009","2010")
hot_dog_places
hot_dog_matrix <- as.matrix(hot_dog_places)
hot_dog_matrix
hot_dog_matrix[1,"2010"]
hot_dog_matrix[1,2]
barplot(hot_dog_matrix)
barplot(hot_dog_matrix, col=c("green","red","yellow"))
row(hot_dog_places)
summary(hot_dog_places)
summary(hot_dog_places[1,])
summary(hot_dog_places[1,1])
summary(hot_dog_places[,1])
barplot(hot_dog_matrix, border=NA, space=0.25, ylim=(c(0,200)), xlab="Year", ylab="Hot dogs and bns (HDBs) eaten", main="Hot Dog Eating Contest Results, 2000-2010")
View(dataMatrix)
USstatePops <- read.DIF("clipboard", transpose=TRUE)
View(USstatePops)
View(USstatePops)
View(USstatePops)
USstatePops <- read.DIF("clipboard", transpose=TRUE)
View(USstatePops)
USstatePops <- read.DIF("clipboard", transpose=TRUE)
USstatePops
?(read.DIF())
help(read.DIF())
(read.DIF())?
?
()
USstatePops <- read.DIF("clipboard", transpose=TRUE, dec=",")
head(USstatePops)
View(X)
hist(rnorm(51, 6043834, 6823984))
draw <- c(1,2,3,4)
reds <- c(5,3,6,2)
sampleJar <- data.frame(draw, reds)
sampleJar
sampleJar.names(c("DRAW","#RED"))
sampleJar.name(c("DRAW","#RED"))
sampleJar <- names(c("DRAW","#RED"))
sampleJar
sampleJar <- data.frame(draw, reds)
sampleJar
V1 <- c(4779736,710231,6392017,2915918,37253956,
5029196,3574097,897934,601723,18801310,9687653,
1360301,1567582,12830632,6483802,3046355,2853118,
4339367,4533372,1328361,5773552,6547629,9883640,
5303925,2967297,5988927,989415,1826341,2700551,
1316470,8791894,2059179,19378102,9535483,672591,
11536504,3751351,3831074,12702379,1052567,
4625364,814180,6346105,25145561,2763885,625741,
8001024,6724540,1852994,5686986,563626)
USstatePops <- data.frame(V1)
sample(USstatePops$V1, size=16, replace=TRUE)
mean(sample(USstatePops$V1, size=16, replace=TRUE))
hist(USstatePops$V1)
hist(USstatePops$V1, breaks=20)
replicate(4, mean(sample(USstatePops$V1, size=16, replace=TRUE)), simplify=TRUE)
mean(replicate(4, mean(sample(USstatePops$V1, size=16, replace=TRUE)), simplify=TRUE))
mean(replicate(4000, mean(sample(USstatePops$V1, size=16, replace=TRUE)), simplify=TRUE))
hist(mean(replicate(4000, mean(sample(USstatePops$V1, size=16, replace=TRUE)), simplify=TRUE)))
hist(replicate(4000, mean(sample(USstatePops$V1, size=16, replace=TRUE)), simplify=TRUE))
mean(replicate(100, mean(sample(USstatePops$V1, size=51, replace=TRUE)), simplify=TRUE))
mean(replicate(100, mean(sample(USstatePops$V1, size=120, replace=TRUE)), simplify=TRUE))
sampleMeans <- mean(replicate(10000, mean(sample(USstatePops$V1, size=5, replace=TRUE)), simplify=TRUE))
length(simpleMeans)
length(sampleMeans)
sampleMeans <- replicate(10000, mean(sample(USstatePops$V1, size=5, replace=TRUE)), simplify=TRUE)
length(sampleMeans)
mean(sampleMeans)
hist(sampleMeans)
summary(sampleMeans)
lotteryNumbers <- c(1:45)
lotteryNumbers
sample(lotteryNumbers, size=6, replace=FALSE)
sample(lotteryNumbers, size=6, replace=FALSE)
sample(lotteryNumbers, size=6, replace=FALSE)
sample(lotteryNumbers, size=6, replace=FALSE)
sample(lotteryNumbers, size=6, replace=FALSE)
quantile(SampleMeans, probs=c(0.005, 0.995))
quantile(sampleMeans, probs=c(0.005, 0.995))
sd(sampleMeans)
quantile(SampleMeans, probs=c(0.005, 0.995))
quantile(SampleMeans, probs=c(0.005, 0.995))
MyMode <- function(myVector)
{}
MyMode <- function(myVector)
{
return (myVector)
}
tinyData <- c(1,2,1,2,3,3,3,4,5,4,5)
MyMode(tidyData)
}
MyMode(tidyData)
}
}
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
}
MyMode <- function(myVector)
{
return (myVector)
}
MyMode(tidyData)
tidyData
MyMode(tinyData)
source('D:/Workspace/DataAnalysis/MyMode.R')
MyMode <- function(myVector)
{
uniqueValues <- unique(myVector)
return (uniqueValues)
}
MyMode(tinyData)
MyMode <- function(myVector)
{
uniqueValues <- unique(myVector)
uniqueCounts <- tabulate(myVector)
return (uniqueValues[which.max(uniqueCounts)])
}
MyMode(tinyData)
tinyData <- c(tinyData,5,5,5)
MyMode(tinyData)
tinyData<-c(tinyData,9,9,9,9,9,9,9)
MyMode(tinyData)
tabulate(tinyData)
unique(tinyData)
MyMode <- function(myVector)
{
uniqueValues <- unique(myVector)
uniqueCounts <- tabulate(match(myVector, uniqueValues))
return (uniqueValues[which.max(uniqueCounts)])
}
MyMode(tinyData)
mfv(tinyData)
mfv
install.packages("modeest")
mfv(tinyData)
library(modeest)
mfv(tinyData)
getwd()
setwd("./SeoulData")
getwd()
eMallData <- read.csv("eMall_100.csv", spe=",", header=T)
eMallData <- read.csv("eMall_100.csv", sep=",", header=T)
View(eMallData)
View(eMallData)
eMallData <- read.csv("eMall_100.csv", sep=",", header=T)
eMallData <- read.csv("eMall_100.csv", sep=",", header=T)
View(eMallData)
eMallData <- read.csv("eMall_100.csv", sep=",", header=T)
View(eMallData)
eMallData <- read.csv("eMall_100_utf8.csv", sep=",", header=T)
weatherData <- read.csv("DailyWeather.csv", sep=",", header=T)
View(weatherData)
?(read.csv)
help(read.csv)
weatherData <- read.csv("DailyWeather.csv", sep=",", header=T, encoding="UTF-8")
file("DailyWeather.csv", "DailyWeather_utf8.csv", encoding="UTF-8")
cat(output, file = (con <- file("DailyWeather.csv", "DailyWeather_utf8.csv", encoding="UTF-8")));close(con)
View(weatherData)
iconv(weatherData.names, "CP949", "UTF-8")
iconv(weatherData.names, "CP949", "UTF-8")
iconv(weatherData.Names, "CP949", "UTF-8")
weatherData.names
weatherData.Names
weatherData.Name
weatherData.name
weatherData.header
weatherData.row
weatherData[1,]
iconv(weatherData[1,2], "CP949", "UTF-8")
iconv(weatherData[2,2], "CP949", "UTF-8")
View(weatherData)
weatherData8 <- read.csv("DailyWeather8.csv", sep=",", header=T, encoding="UTF-8")
weatherData8 <- read.csv("DailyWeather8.csv", sep=",", header=T)
col.names
col.names(weatherDatat)
col.names(weatherData)
weatherData$col.names
weatherData.col.names
getwd()
setwd("D:/Workspace/DataAnalysis")
